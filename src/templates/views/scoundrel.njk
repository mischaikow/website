{% include "common/site-head.njk" %}
<title>Scoundrel</title>
<script>
  function initWorker() {
    globalThis.pyodideWorker = new Worker("/js/scoundrel_webworker.js", {
      type: "module",
    })

    pyodideWorker.onmessage = async function (event) {
      const data = event.data;
      if (data.type === "gamestatus") {
        writeGameState(data.body)
        console.log('message received - gamestatus')
        console.log(data.body)
      } else if (data.type === "error") {
        // manage the error
      } else if (data.type === "gamewon") {
        // show the game over splash screen
      } else if (data.type === "gamelost") {
        // show the game over splash screen
      }
    }

    globalThis.do_message = async function (type, str) {
      const promise = new Promise((resolve, reject) => {
        resultPromiseResolver = resolve;
      })
      pyodideWorker.postMessage({ type: type, value: str})
      const retval = await promise
      resultPromiseResolver = undefined;
      return await promise
    }
  }

  function buttonDisplay(roomContents) {
    if (roomContents.length < 4) {
      document.getElementById("button4").style.display = "none";
    } else {
      document.getElementById("button4").style.display = "inline-block";
    }

    if (roomContents.length < 3) {
      document.getElementById("button3").style.display = "none";
    } else {
      document.getElementById("button3").style.display = "inline-block";
    }

  }

  function roomDisplay(roomContents) {
    output = ""
    for (let i = 0; i < roomContents.length; i++) {
      if (i > 0) {
        output = output + "&nbsp;&nbsp;&nbsp;"
      }
      output = output + "<sup>" + (i+1).toString() + "</sup>"
      if (roomContents[i].search('♥') > -1 || roomContents[i].search('♦') > -1) {
        output = output + "<span style='color: red;'>" + roomContents[i] + "</span>"
      } else {
        output = output + roomContents[i]
      }
    }
    document.getElementById("roomContents").innerHTML = output
  }

  function weaponDisplay(weapon, weaponChain) {
    output = "Weapon: "
    if (weapon === 0) {
      output = output + "unarmed"
    } else {
      output = output + "<span style='font-weight: 700;'>" + weapon + "</span>"
    }
    if (weaponChain.length > 0) {
      output = output + " | "
      for (let i = 0; i < weaponChain.length; i++) {
        output = output + weaponChain[i] + " "
      }
    }
    document.getElementById("weapon").innerHTML = output
  }

  function healthDisplay(health) {
    if (health < 10) {
      document.getElementById("health").innerHTML = "<span style='color: red;'>" + health + "</span>"
    } else {
      document.getElementById("health").innerHTML = health
    }
  }

  function cardsPlayedDisplay(cardsPlayed) {
    output = ""
    for (let key in cardsPlayed) {
      output = output + "<div>"
      if (key === '♥' || key === '♦') {
        output = output + "<span style='color: red;'>" + key + "</span>"
      } else {
        output = output + key
      }
      output = output + ": "
      for (let i = 0; i < cardsPlayed[key].length; i++) {
        output = output + cardsPlayed[key][i] + " "
      }
      output = output + "</div>"
    }
    document.getElementById("cardsPlayed").innerHTML = output
  }

  function roomSkipStatusDisplay(skipped_last_room) {
    if (skipped_last_room) {
      document.getElementById("lastRoomSkipped").innerHTML = "Cannot skip this room."
      document.getElementById("buttonS").setAttribute("disabled", "disabled")
    } else {
      document.getElementById("lastRoomSkipped").innerHTML = ""
      document.getElementById("buttonS").removeAttribute("disabled")
    }
  }

  function clearLoadingScreen() {
    document.getElementById("loadingScreen").style.visibility = "hidden";
  }

  function writeGameState(gameState) {
    document.getElementById("roomNumber").innerHTML = gameState.room
    roomDisplay(gameState.board)
    weaponDisplay(gameState.weapon, gameState.weapon_chain)
    healthDisplay(gameState.health)
    cardsPlayedDisplay(gameState.cards_played)
    roomSkipStatusDisplay(gameState.skipped_last_room)
    buttonDisplay(gameState.board)
    clearLoadingScreen()
  }

  async function processInput(aStr) {
    await do_message("push", aStr)
  }

  async function resetGame() {
    await do_message("reset", "")
  }
</script>

{% include "common/site-nav.njk" %}
<body onload="initWorker()">

<div class="scoundrel">
  <h1 style="margin-top: 25px">Scoundrel</h1>

  <div id="game-enclosure">
    <div id="game-layer">
      <div id="game-display" style="height: 240px;">
        <div style="padding-bottom: 15px;">Room: <span id="roomNumber"></span></div>
        <div id="roomContents" style="padding-bottom: 25px;"></div>
        <div style="padding-bottom: 5px;" id="weapon"></div>
        <div style="padding-bottom: 15px;">HP <span id="health" style="font-weight: 700;"></span> / 20</div>
        <div id="cardsPlayed"></div>

      </div>
      <div class="splash" id="gameEndScreen"></div>

      <div id="lastRoomSkipped" style="height: 24px;"></div>

      <button id="button1" onClick="processInput('1')">1</button>
      <button id="button2" onClick="processInput('2')">2</button>
      <button id="button3" onClick="processInput('3')">3</button>
      <button id="button4" onClick="processInput('4')">4</button>

      <button id="buttonS" onClick="processInput('S')">Skip Room</button>

      <button id="buttonQ" onClick="resetGame()">Restart</button>
    </div>

    <div class="splash" id="loadingScreen"><img src="/icons/Fading_hearts.gif" alt="loading"></div>
  </div>
</div>

</body>


{% include "common/site-footer.njk" %}